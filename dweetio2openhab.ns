/*

Listens for a stream at dweet.io
Updates an item at a openHAB-installation when dweets are received

*/
importScripts = require('./importscripts.js').importScripts;
importScripts('./settings.ns');
importScripts('./myLog.ns');
importScripts('./myTime.ns');
let XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;
let dweetClient = require('node-dweetio');
let dweetio = new dweetClient();

setCurrentLogLevel(LOGLEVEL_DEBUG);

const OPENHAB_ITEM_1_TEMP = 'SoveromTemp';
const OPENHAB_ITEM_1_UPDATED = 'SoveromTempUpdated';

const OPENHAB_ITEM_2_PROXIMITY = 'KontoretDoor';
const OPENHAB_ITEM_2_UPDATED = 'KontoretDoorUpdated';

const OPENHAB_ITEM_3_PROXIMITY = 'WCDoor';
const OPENHAB_ITEM_3_UPDATED = 'WCDoorUpdated';

const OPENHAB_ITEM_4_TEMP = 'BodTemp';
const OPENHAB_ITEM_4_UPDATED = 'BodTempUpdated';


console.log(myTime_ts() + " Starting listening for events from " + DWEET_THING);

dweetio.listen_for(DWEET_THING, function (dweet) {
    let jsonData = dweet.content;
    if (isTrace()) {
        console.log( myTime_ts() + " jsonData: ", JSON.stringify(jsonData, null, 3) );
    }
    let dt_event = jsonData.event;
    let dt_event_type = dt_event.eventType;
    let device_id =  getDeviceId(dt_event.targetName);

    if (isTrace()) {
        const ts = myTime_toLocaleTime(dt_event.timestamp);
        console.log(ts + ', Device_id: ' + device_id + ", event_type: '" + dt_event_type + "' ");
    }

    if ( device_id === DT_DEVICE_ID_TEMP_1 && 'temperature' === dt_event_type ) {
        const temp = dt_event.data.temperature.value;
        const dt_time = dt_event.data.temperature.updateTime;
        const no_time = myTime_toLocaleTime(dt_time);
        if (isInfo()) {
            console.log(no_time + ' temperature [' +DT_DEVICE_ID_TEMP_1 + ' - ' + OPENHAB_ITEM_1_TEMP + '] is set to ' + temp.toFixed(2) + '˚C');
        }
        sendCommand(OPENHAB_ITEM_1_TEMP, temp.toFixed(2) + ' ˚C');
        sendCommand(OPENHAB_ITEM_1_UPDATED, no_time);
    }

    if ( device_id === DT_DEVICE_ID_PROXIMITY_2 && 'objectPresent' === dt_event_type ) {
        const status = dt_event.data.objectPresent.state === 'PRESENT' ? 'Lukket' : 'Åpen';
        const dt_time = dt_event.data.objectPresent.updateTime;
        const no_time = myTime_toLocaleTime(dt_time);
        if (isInfo()) {
            console.log(no_time + ' proximity [' + DT_DEVICE_ID_PROXIMITY_2 + ' - ' + OPENHAB_ITEM_2_PROXIMITY + '] is set to ' + status);
        }
        sendCommand(OPENHAB_ITEM_2_PROXIMITY, status);
        sendCommand(OPENHAB_ITEM_2_UPDATED, no_time);
    }

    if ( device_id === DT_DEVICE_ID_PROXIMITY_3 && 'objectPresent' === dt_event_type ) {
        const status = dt_event.data.objectPresent.state === 'PRESENT' ? 'Opptatt' : 'Ledig';
        const dt_time = dt_event.data.objectPresent.updateTime;
        const no_time = myTime_toLocaleTime(dt_time);
        if (isInfo()) {
            console.log(no_time + ' proximity [' + DT_DEVICE_ID_PROXIMITY_3 + ' - ' + OPENHAB_ITEM_3_PROXIMITY + '] is set to ' + status);
        }
        sendCommand(OPENHAB_ITEM_3_PROXIMITY, status);
        sendCommand(OPENHAB_ITEM_3_UPDATED, no_time);
    }

    if ( device_id === DT_DEVICE_ID_TEMP_4 && 'temperature' === dt_event_type ) {
        const temp = dt_event.data.temperature.value;
        const dt_time = dt_event.data.temperature.updateTime;
        const no_time = myTime_toLocaleTime(dt_time);
        if (isInfo()) {
            console.log(no_time + ' temperature [' + DT_DEVICE_ID_TEMP_4 + ' - ' + OPENHAB_ITEM_4_TEMP + '] is set to ' + temp.toFixed(2) + '˚C');
        }
        sendCommand(OPENHAB_ITEM_4_TEMP, temp.toFixed(2) + ' ˚C');
        sendCommand(OPENHAB_ITEM_4_UPDATED, no_time);
    }


});

/**
 * Sends a command to update an openHAB Item
 *
 * @param itemId
 * @param command
 */
function sendCommand(itemId, command) {
    let xhr_sendCommand = new XMLHttpRequest();
    xhr_sendCommand.withCredentials = true;
    xhr_sendCommand.addEventListener("readystatechange", function () {
        if (this.readyState === this.DONE) {
            if (this.status === 200) {
                let res = this.responseText;
                if (isTrace()) {
                    console.log(myTime_ts() + " " + this.status +  " OK => Response: ", res);
                }
            } else {
                let res = this.responseText;
                if (isError()) {
                    console.log(myTime_ts() + " " + this.status +  " " + this.statusText + " => Response: ", JSON.stringify(res, null, 2) );
                }
            }
        }
    });
    xhr_sendCommand.open('POST', OPENHAB_URL + itemId);
    xhr_sendCommand.setRequestHeader("accept", "application/json");
    xhr_sendCommand.send(command);
}


/**
 * Extracts the DEVICE_ID from the targetname-parameter
 *
 * @param deviceUrl
 * @returns {string | void}
 */
function getDeviceId(deviceUrl) {
    let posDevices = deviceUrl.indexOf("/devices");
    posDevices += "/devices/".length;
    return deviceUrl.substr(posDevices);
}

